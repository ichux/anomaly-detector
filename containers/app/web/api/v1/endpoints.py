from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Query
from processor.database import AnomalySummary, SystemEventsDBHandler
from web.utils import llm_active

router: APIRouter = APIRouter()
system_event_store: SystemEventsDBHandler = SystemEventsDBHandler()
anomaly_summary_store: AnomalySummary = AnomalySummary()


@router.get("/anomalies", summary="List recent anomalies")
def get_anomalies(
    duration: Optional[int] = Query(
        None, description="How far back (in seconds) to look"
    ),
) -> List[Dict[str, Any]]:
    return system_event_store.recent_anomalies(duration=duration)  # type: ignore


@router.get("/summary", summary="Get latest summary")
def get_latest_summary(
    limit: Optional[int] = Query(
        None, description="How much summaries to gather (default: 10)"
    ),
) -> List[Dict[str, Any]]:
    """Return the latest summary generated by the LLM."""
    return [
        {key: summary[key] for key in ("window_start", "window_end", "summary")}
        for summary in anomaly_summary_store.recent_summaries(limit)
    ]


@router.get("/status", summary="Get system health status")
def get_status() -> Dict[str, str]:
    return {
        "summary_store": (
            "active" if anomaly_summary_store.get_collection() else "down"
        ),
        "anomaly_store": "active" if system_event_store.get_collection() else "down",
        "llm": "active" if llm_active() else "down",
    }
